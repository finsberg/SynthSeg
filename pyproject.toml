[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "SynthSeg"
version = "2.0"
license = { file = "LICENSE.txt" }
dependencies = [] #"numpy", "Keras<=2.4.3", "nibabel", "scipy", "matplotlib", "Pillow", "h5py", "protobuf", "requests", "requests-oauthlib", "oauthlib", "google-auth", "google-auth-oauthlib", "google-pasta", "tensorflow", "tensorflow-estimator", "tensorboard", "tensorboard-plugin-wit", "Markdown", "six", "cycler", "kiwisolver", "matplotlib", "protobuf", "scipy", "six", "termcolor", "werkzeug", "wrapt", "zipp", "astunparse", "cachetools", "certifi", "charset-normalizer", "contourpy", "fonttools", "gast", "grpcio", "idna", "importlib-metadata", "Keras-Applications", "Keras-Preprocessing", "oauthlib", "opt-einsum", "packaging", "pyasn1", "pyasn1-modules", "pyparsing", "python-dateutil", "requests", "rsa", "urllib3"]
description = "Source code for the mri2fem book."
authors = [
    {name = "Benjamin Billot"},
]
keywords = ["mri", "brain", "segmentation"]



[project.readme]
file = "README.md"
content-type = "text/markdown"


# [project.scripts]
# mri2fem = "mri2fem.cli:main"

# [project.optional-dependencies]
# fenics = ["fenics-dolfin"]
# svmtk = ["SVMTK"]
# fenicsx = ["fenics-dolfinx"]


[tool.setuptools]
include-package-data = true
package-dir = {"" = "src"}
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false



[tool.aliases]
test = "pytest"

[tool.pytest.ini_options]
testpaths = ["tests"]


# [tool.mypy]
# files = ["src/gotranx", "tests"]
# ignore_missing_imports = true
# exclude = [
#     "docs",
#     "examples",
# ]

# [tool.coverage.run]
# omit = ["src/gotranx/__main__.py", "src/gotranx/templates/__init__.py"]


[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    "examples",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 100

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]
ignore = ["E402", "E741", "E743", "E731"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[tool.bumpversion]
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
current_version = "2.0"


[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'
